<?php

namespace Indigo\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Indigo\UserBundle\Entity\User;
use Indigo\GameBundle\Entity\Team;

/**
 * PlayerTeamRelationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerTeamRelationRepository extends EntityRepository
{

    /**
     * @param User $player1
     * @param User $player2
     * @return mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPlayersCommonTeam(User $player1, User $player2)
    {
        try {
            $qb = $this->_em->createQueryBuilder();
            $qb->select('pt1.teamId')
                ->from('IndigoGameBundle:PlayerTeamRelation', 'pt1')
                ->innerJoin('IndigoGameBundle:PlayerTeamRelation', 'pt2', 'WITH', 'pt2.team = pt1.team')
                ->where('pt1.player = :player1')
                ->andWhere('pt2.player= :player2')
                ->setParameters(
                    [
                        'player1' => $player1,
                        'player2' => $player2
                    ]
                );

            $commonTeam = $qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {

            return  null;
        }
        return $commonTeam['teamId'];
    }


    /**
     * @param User $player
     * @return mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPlayerSingleTeam( User $player)
    {
        try {
            $qb = $this->_em->createQueryBuilder();
            $qb->select('pt2')
                ->from('IndigoGameBundle:PlayerTeamRelation', 'pt1')
                ->innerJoin('IndigoGameBundle:Team', 'pt2', 'WITH', 'pt2.id = pt1.team')
                ->where('pt1.player = :player1')
                ->andWhere('pt2.isSingle = :isSingle')
                ->setParameters(
                    [
                        'player1' => $player->getId(),
                        'isSingle' => 1
                    ]
                );

            $playerTeam = $qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {

            return  null;
        }
        return $playerTeam;
    }


}
