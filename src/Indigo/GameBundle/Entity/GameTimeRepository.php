<?php

namespace Indigo\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Indigo\UserBundle\Entity\User;


/**
 * GameTimeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameTimeRepository extends EntityRepository
{

    CONST GAMETIME_TOLERANCE = 18000;
    CONST TIME_INTERVAL = 15;//minutes
    CONST INTERVAL_FOR_NEXT_CLICK = 1;//minutes

    /**
     * @param \ArrayIterator $players
     * @return null
     */
    public function getEarliestReservation(\ArrayIterator $players)
    {
        try {
            $playersIdArray = [];
            foreach ($players as $playerId) {
                $meta = $this->_em->getClassMetadata(get_class($playerId));
                $identifier = $meta->getIdentifierValues($playerId);
                $playersIdArray [] = $identifier;
            }
            $qb = $this->_em->createQuery("
                SELECT gt
                FROM Indigo\GameBundle\Entity\GameTime gt
                WHERE
                gt.timeOwner IN ( :players )
                    AND gt.confirmed = '0'
                    AND (ABS( TIME_TO_SEC( TIMEDIFF(gt.startAt, CURRENT_TIMESTAMP())) ) <= :timeInSec
                    OR (gt.startAt <= CURRENT_TIMESTAMP() AND gt.finishAt >= CURRENT_TIMESTAMP()))
                ORDER BY gt.startAt ASC
                ")
                ->setParameters([
                    'players'=> $playersIdArray,
                    'timeInSec' => self::GAMETIME_TOLERANCE
                ]);

            $reservation = $qb->getSingleResult();
        } catch (\Exception $e) {

            return  null;
        }
        return $reservation;
    }


    /**
     * @param User $player
     * @return mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
     public function getMyNextReservation(User $player)
    {
        if ($playerId = $player->getId()) {
            try {


                $qb = $this->_em->createQuery("
                    SELECT gt
                     FROM Indigo\GameBundle\Entity\GameTime gt
                    WHERE
                    gt.timeOwner = :playerId
                        AND gt.confirmed = :ack
                        AND (gt.finishAt > CURRENT_TIMESTAMP())
                    ORDER BY gt.startAt ASC

                    ")->setMaxResults(1)
                    ->setParameters([
                        'ack' => 0,
                        'playerId' => $playerId,
                    ]);


                $reservation = $qb->getSingleResult();

            } catch (NoResultException $e) {

                return null;
            }

            return $reservation;
        }

        return null;
    }

}
